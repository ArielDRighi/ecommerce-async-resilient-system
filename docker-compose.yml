version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ecommerce-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ecommerce_async
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    networks:
      - ecommerce-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres -d ecommerce_async']
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache & Message Queue
  redis:
    image: redis:7-alpine
    container_name: ecommerce-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ""
    volumes:
      - redis_data:/data
    ports:
      - '6379:6379'
    networks:
      - ecommerce-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  # NestJS Application (for development)
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    container_name: ecommerce-app-dev
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=ecommerce_async
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=development-jwt-secret-key
      - ENCRYPTION_KEY=dev-encryption-key-32-characters
      - LOG_LEVEL=debug
      - LOG_COLORIZE=true
      - ENABLE_SWAGGER=true
      - HELMET_ENABLED=false
    volumes:
      - ./src:/app/src:ro
      - ./package*.json:/app/
      - /app/node_modules
    ports:
      - '3000:3000'
      - '9229:9229' # Debug port
    networks:
      - ecommerce-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: npm run start:dev
    healthcheck:
      test: ['CMD', 'node', 'health-check.js']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Database Management Tool (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: ecommerce-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@ecommerce.local
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - '8080:80'
    networks:
      - ecommerce-network
    depends_on:
      - postgres
    profiles:
      - tools

  # Redis Commander (optional)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: ecommerce-redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - '8081:8081'
    networks:
      - ecommerce-network
    depends_on:
      - redis
    profiles:
      - tools

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  ecommerce-network:
    driver: bridge
