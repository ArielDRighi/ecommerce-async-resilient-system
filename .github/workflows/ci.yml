name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_ENV: test

jobs:
  # Job 1: Linting and Code Quality
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check Prettier formatting
        run: npm run format:check

      - name: TypeScript type checking
        run: npm run type-check

  # Job 2: Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=high

      - name: Check for vulnerabilities
        run: npm audit --audit-level=critical

  # Job 3: Tests with Matrix Strategy
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Wait for PostgreSQL
        run: |
          timeout 30s bash -c 'until nc -z localhost 5432; do sleep 1; done'

      - name: Wait for Redis
        run: |
          timeout 30s bash -c 'until nc -z localhost 6379; do sleep 1; done'

      - name: Run unit tests
        env:
          DATABASE_HOST: localhost
          DATABASE_PORT: 5432
          DATABASE_NAME: test_db
          DATABASE_USERNAME: test_user
          DATABASE_PASSWORD: test_password
          DATABASE_USER: test_user
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test-jwt-secret-key-for-testing
          ENCRYPTION_KEY: test-encryption-key-32-characters
        run: npm run test

      - name: Run e2e tests
        env:
          DATABASE_HOST: localhost
          DATABASE_PORT: 5432
          DATABASE_NAME: test_db
          DATABASE_USERNAME: test_user
          DATABASE_PASSWORD: test_password
          DATABASE_USER: test_user
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test-jwt-secret-key-for-testing
          ENCRYPTION_KEY: test-encryption-key-32-characters
        run: npm run test:e2e

      - name: Generate coverage report
        env:
          DATABASE_HOST: localhost
          DATABASE_PORT: 5432
          DATABASE_NAME: test_db
          DATABASE_USERNAME: test_user
          DATABASE_PASSWORD: test_password
          DATABASE_USER: test_user
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test-jwt-secret-key-for-testing
          ENCRYPTION_KEY: test-encryption-key-32-characters
        run: npm run test:cov

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: matrix.node-version == '20.x'
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  # Job 4: Build Application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint, security]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: dist
          key: build-${{ github.sha }}

  # Job 5: Quality Gate Check
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [test, build]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
      
      - name: Wait for PostgreSQL
        run: |
          timeout 30s bash -c 'until nc -z localhost 5432; do sleep 1; done'

      - name: Wait for Redis
        run: |
          timeout 30s bash -c 'until nc -z localhost 6379; do sleep 1; done'

      - name: Check test coverage threshold
        env:
          DATABASE_HOST: localhost
          DATABASE_PORT: 5432
          DATABASE_NAME: test_db
          DATABASE_USERNAME: test_user
          DATABASE_PASSWORD: test_password
          DATABASE_USER: test_user
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test-jwt-secret-key-for-testing
          ENCRYPTION_KEY: test-encryption-key-32-characters
        run: |
          npm run test:cov
          echo "Checking coverage threshold..."
          # The coverage threshold is configured in jest.config.js

      - name: Quality Gate Summary
        run: |
          echo "‚úÖ All quality gates passed:"
          echo "- Linting: ESLint clean"
          echo "- Formatting: Prettier formatted"
          echo "- Types: TypeScript compilation successful"
          echo "- Security: No critical vulnerabilities"
          echo "- Tests: All tests passing"
          echo "- Coverage: Above 80% threshold"
          echo "- Build: Successful compilation"

  # Job 6: Notification on Success
  notify-success:
    name: Success Notification
    runs-on: ubuntu-latest
    needs: [quality-gate]
    if: success()
    steps:
      - name: Notify success
        run: |
          echo "üéâ CI Pipeline completed successfully!"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "All quality gates passed ‚úÖ"

  # Job 7: Notification on Failure
  notify-failure:
    name: Failure Notification
    runs-on: ubuntu-latest
    needs: [lint, security, test, build, quality-gate]
    if: failure()
    steps:
      - name: Notify failure
        run: |
          echo "‚ùå CI Pipeline failed!"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Please check the failed jobs above."
